{"ast":null,"code":"import _objectSpread from \"/home/tom/Ahmed fouad/foush/Learning&work/work/burgerApp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/tom/Ahmed fouad/foush/Learning&work/work/burgerApp/src/Containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Burger from '../../Components/Burger/Burger';\nimport BuildControls from '../../Components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\nimport OrderSummary from '../../Components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport WithErrorHandler from '../../hoc/WithErrorHandler/WithErroHandler';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions'; // const INGREDIENT_PRICES={\n//     salad:  0.5,\n//     cheese: 0.4,\n//     meat:   1.3,\n//     bacon:  0.7\n// };\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      error: false\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      console.log(this.props.history);\n      const queryParams = [];\n\n      for (let i in this.state.ingredients) {\n        queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n      }\n\n      queryParams.push('price=' + this.state.totalPrice);\n      const queryString = queryParams.join('&');\n      this.props.history.push({\n        pathname: '/checkout',\n        search: '?' + queryString\n      }); // this.setState({loading:true});\n      // alert('YOU Continue!');\n      // const order={\n      //     ingredients:this.state.ingredients,\n      //     price:this.state.totalPrice.toFixed(2),\n      //     customer:{\n      //         name:'foushware',\n      //         address:{\n      //             street:'',\n      //             zipCode:'',\n      //             country:''\n      //         },\n      //         email:\"fousware@gmail.com\"\n      //     },\n      //     deliveryMethod:'fastest'\n      // }\n      // axios.post('/orders.json',order)\n      //     .then(\n      //         ressponse=>\n      //         // console.log(ressponse)\n      //         this.setState({loading:false,purchasing:false})\n      //         )\n      //     .catch(error=>\n      //         // console.log(error)\n      //         this.setState({loading:false,purchasing:false})\n      //         );\n    };\n  }\n\n  componentDidMount() {// axios.get('https://react-my-burger-759e5.firebaseio.com/ingredients.json')\n    // .then(\n    //     response=>{\n    //             this.setState({ingredients:response.data})\n    //     }\n    // ).catch(error=>{\n    //     this.setState({error:true});\n    // });\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  } // addIngredientHandler=(type)=>{\n  //     const oldcount=this.state.ingredients[type];\n  //     const updatedCount=oldcount +1;\n  //     const updatedIngredients={...this.state.ingredients};\n  //     updatedIngredients[type]=updatedCount;\n  //     const priceAddition=INGREDIENT_PRICES[type];\n  //     const oldPrice=this.state.totalPrice;\n  //     const newPrice=oldPrice+priceAddition;\n  //     this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n  //     this.updatePurchaseState(updatedIngredients);\n  // }\n  // this.setState({loading:true});\n  // // alert('YOU Continue!');\n  // const order={\n  //     ingredients:this.state.ingredients,\n  //     price:this.state.totalPrice.toFixed(2),\n  //     customer:{\n  //         name:'foushware',\n  //         address:{\n  //             street:'',\n  //             zipCode:'',\n  //             country:''\n  //         },\n  //         email:\"fousware@gmail.com\"\n  //     },\n  //     deliveryMethod:'fastest'\n  // }\n  // axios.post('/orders.json',order)\n  //     .then(\n  //         ressponse=>\n  //         // console.log(ressponse)\n  //         this.setState({loading:false,purchasing:false})\n  //         )\n  //     .catch(error=>\n  //         // console.log(error)\n  //         this.setState({loading:false,purchasing:false})\n  //         );\n  // removeIngredientHandler=(type)=>{\n  //     const oldcount=this.state.ingredients[type];\n  //     if(oldcount <= 0){\n  //         return;\n  //     }\n  //     const updatedCount=oldcount -1;\n  //     const updatedIngredients={...this.state.ingredients};\n  //     updatedIngredients[type]=updatedCount;\n  //     const priceDeduction=INGREDIENT_PRICES[type];\n  //     const oldPrice=this.state.totalPrice;\n  //     const newPrice=oldPrice-priceDeduction;\n  //     this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n  //     this.updatePurchaseState(updatedIngredients);\n  // }\n\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.props.ings);\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    } // {salad:true,meat:false,bacon:true}\n\n\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"ingredients can't be loaded!\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    });\n\n    if (this.props.ings) {\n      burger = React.createElement(React.Fragment, null, React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdded,\n        ingredientremoved: this.props.onIngredientRemoved,\n        disabled: disabledInfo,\n        price: this.state.totalPrice,\n        ordered: this.purchaseHandler,\n        purchasable: this.state.purchasable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        ingredients: this.props.ings,\n        purchaseCancelled: this.purchaseCancelHandler,\n        purchaseContinued: this.purchaseContinueHandler,\n        price: this.state.totalPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      });\n\n      if (this.state.loading) {\n        orderSummary = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n} //fetch props from global state [reducer]\n\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: ingName => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: ingName\n    }),\n    onIngredientRemoved: ingName => dispatch({\n      type: actionTypes.REMOVE_INGREDIENT,\n      ingredientName: ingName\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["/home/tom/Ahmed fouad/foush/Learning&work/work/burgerApp/src/Containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Burger","BuildControls","Modal","axios","OrderSummary","Spinner","WithErrorHandler","connect","actionTypes","BurgerBuilder","state","totalPrice","purchasable","purchasing","loading","error","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","console","log","props","history","queryParams","i","ingredients","push","encodeURIComponent","queryString","join","pathname","search","componentDidMount","updatePurchaseState","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","ings","key","orderSummary","burger","onIngredientAdded","onIngredientRemoved","mapStateToProps","mapDispatchToProps","dispatch","ingName","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React ,{Component} from 'react';\nimport Burger from '../../Components/Burger/Burger';\nimport BuildControls from '../../Components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\nimport OrderSummary from '../../Components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport WithErrorHandler from '../../hoc/WithErrorHandler/WithErroHandler';\nimport {connect} from 'react-redux';\nimport * as actionTypes from '../../store/actions';\n// const INGREDIENT_PRICES={\n//     salad:  0.5,\n//     cheese: 0.4,\n//     meat:   1.3,\n//     bacon:  0.7\n// };\n\nclass BurgerBuilder extends Component{\n\n    state={\n       \n        totalPrice:4,\n        purchasable:false,\n        purchasing:false,\n        loading:false,\n        error:false\n    }\n    componentDidMount() {\n        // axios.get('https://react-my-burger-759e5.firebaseio.com/ingredients.json')\n        // .then(\n        //     response=>{\n        //             this.setState({ingredients:response.data})\n        //     }\n        // ).catch(error=>{\n        //     this.setState({error:true});\n        // });\n    }\n\n    updatePurchaseState(ingredients){\n        \n        const sum = Object.keys(ingredients).map(igKey=>{\n            return ingredients[igKey];\n        }).reduce((sum,el)=>{return sum+el},0);\n        this.setState({purchasable: sum > 0})\n    }\n    // addIngredientHandler=(type)=>{\n    //     const oldcount=this.state.ingredients[type];\n    //     const updatedCount=oldcount +1;\n    //     const updatedIngredients={...this.state.ingredients};\n    //     updatedIngredients[type]=updatedCount;\n    //     const priceAddition=INGREDIENT_PRICES[type];\n    //     const oldPrice=this.state.totalPrice;\n    //     const newPrice=oldPrice+priceAddition;\n    //     this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    //     this.updatePurchaseState(updatedIngredients);\n    // }\n       // this.setState({loading:true});\n        // // alert('YOU Continue!');\n        // const order={\n        //     ingredients:this.state.ingredients,\n        //     price:this.state.totalPrice.toFixed(2),\n        //     customer:{\n        //         name:'foushware',\n        //         address:{\n        //             street:'',\n        //             zipCode:'',\n        //             country:''\n        //         },\n        //         email:\"fousware@gmail.com\"\n        //     },\n        //     deliveryMethod:'fastest'\n        // }\n\n        // axios.post('/orders.json',order)\n        //     .then(\n        //         ressponse=>\n        //         // console.log(ressponse)\n        //         this.setState({loading:false,purchasing:false})\n                \n        //         )\n        //     .catch(error=>\n        //         // console.log(error)\n        //         this.setState({loading:false,purchasing:false})\n        //         );\n    // removeIngredientHandler=(type)=>{\n    //     const oldcount=this.state.ingredients[type];\n    //     if(oldcount <= 0){\n    //         return;\n    //     }\n    //     const updatedCount=oldcount -1;\n    //     const updatedIngredients={...this.state.ingredients};\n    //     updatedIngredients[type]=updatedCount;\n    //     const priceDeduction=INGREDIENT_PRICES[type];\n    //     const oldPrice=this.state.totalPrice;\n    //     const newPrice=oldPrice-priceDeduction;\n    //     this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    //     this.updatePurchaseState(updatedIngredients);\n    // }\n\n    purchaseHandler=()=>{\n        this.setState({purchasing:true});\n    }\n    purchaseCancelHandler=()=>{\n        this.setState({purchasing:false});\n    }\n    purchaseContinueHandler=()=>{\n\n        console.log(this.props.history);\n        const queryParams=[];\n        for(let i in this.state.ingredients){\n            queryParams.push(encodeURIComponent(i)+'='+encodeURIComponent(this.state.ingredients[i]));\n        }\n        queryParams.push('price='+this.state.totalPrice);\n        const queryString = queryParams.join('&');\n        this.props.history.push({\n            pathname:'/checkout',\n            search:'?'+ queryString\n        });\n\n        // this.setState({loading:true});\n        // alert('YOU Continue!');\n        // const order={\n        //     ingredients:this.state.ingredients,\n        //     price:this.state.totalPrice.toFixed(2),\n        //     customer:{\n        //         name:'foushware',\n        //         address:{\n        //             street:'',\n        //             zipCode:'',\n        //             country:''\n        //         },\n        //         email:\"fousware@gmail.com\"\n        //     },\n        //     deliveryMethod:'fastest'\n        // }\n\n        // axios.post('/orders.json',order)\n        //     .then(\n        //         ressponse=>\n        //         // console.log(ressponse)\n        //         this.setState({loading:false,purchasing:false})\n                \n        //         )\n        //     .catch(error=>\n        //         // console.log(error)\n        //         this.setState({loading:false,purchasing:false})\n        //         );\n\n    }\n\n    render(){\n        const disabledInfo={\n            ...this.props.ings\n        };\n        for (let key in disabledInfo){\n            disabledInfo[key]=disabledInfo[key]<=0;\n\n        }\n        // {salad:true,meat:false,bacon:true}\n\n        let orderSummary=null;\n         \n\n        \n        let burger=this.state.error?<p>ingredients can't be loaded!</p>:<Spinner/>;\n\n        if(this.props.ings){\n            burger=(\n                <>\n                    <Burger ingredients={this.props.ings}/>\n                        <BuildControls\n                                ingredientAdded={this.props.onIngredientAdded}\n                                ingredientremoved={this.props.onIngredientRemoved}\n                                disabled={disabledInfo}\n                                price={this.state.totalPrice}\n                                ordered={this.purchaseHandler}\n                                purchasable={this.state.purchasable}\n                        />\n                </>\n            );\n\n        orderSummary= <OrderSummary\n            ingredients={this.props.ings }\n            purchaseCancelled={this.purchaseCancelHandler}\n            purchaseContinued={this.purchaseContinueHandler}\n            price={this.state.totalPrice}/>;\n\n\n            if(this.state.loading){\n                orderSummary=<Spinner/>\n            }\n        }\n       \n        return(\n\n            \n            <>\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n                \n            </>\n        );\n    }\n}\n//fetch props from global state [reducer]\nconst mapStateToProps= state=>{ \n    return{\n        ings:state.ingredients\n    };\n}\nconst mapDispatchToProps=dispatch=>{\n    return{\n        onIngredientAdded:(ingName)=>dispatch({type:actionTypes.ADD_INGREDIENT,ingredientName:ingName}),\n        onIngredientRemoved:(ingName)=>dispatch({type:actionTypes.REMOVE_INGREDIENT,ingredientName:ingName})\n    }\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(WithErrorHandler(BurgerBuilder,axios));"]},"metadata":{},"sourceType":"module"}